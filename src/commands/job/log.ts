import { flags } from '@oclif/command'
import { BasicCommand } from '../../lib/commands/basic-command'
import { printValidatedOutput } from '../../lib/functions/misc-functions'

export default class Log extends BasicCommand {
  static description = 'Print console output generated by a job.'
  static args = [{name: 'id'}]
  static flags = {
    "all": flags.boolean({default: false, description: "show all output"}),
    "lines": flags.integer({default: 100}),
    "stacks-dir": flags.string({default: "", description: "override default stack directory"}),
    "visible-stacks": flags.string({multiple: true, description: "if specified only these stacks will be affected by this command"}),
    "no-autoload": flags.boolean({default: false, description: "prevents cli from automatically loading flags using project settings files"}),
    "explicit": flags.boolean({default: false})
  }
  static strict = true;

  async run()
  {
    const { argv, flags } = this.parse(Log)
    this.augmentFlagsWithProjectSettings(flags, {
      "visible-stacks":false,
      "stacks-dir": false,
    })
    // -- get job id -----------------------------------------------------------
    const job_id = await this.getJobId(argv, flags)
    if(job_id === false) return // exit if user selects empty id or exits interactive dialog

    const job_manager = this.newJobManager(false, false, flags['explicit'])
    const log = job_manager.log({
      "id": job_id,
      "stack-paths": this.extractVisibleStacks(flags),
      "lines": (flags.all) ? "all" : `${flags.lines}`
    })

    if(!log.success)
      return printValidatedOutput(log)
    console.log(log.value)
  }

}
